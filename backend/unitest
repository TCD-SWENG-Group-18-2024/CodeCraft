import unittest
from io import BytesIO
from codecraft import app

#Testing plain text input
class TestTextUpload(unittest.TestCase):
     def setUp(self):
         self.app = app.test_client()

    #TEXT INPUT: python code which calculates the roots of a quadratic equation
     def test_text_upload_complex_code(self):
         json_text_payload = {
         "user_input":"import math def quadratic_roots(a, b, c):  discriminant = b**2 - 4*a*c  if discriminant < 0:     return None  # No real roots  elif discriminant == 0:    root = -b / (2*a)   return rootelse:root1 = (-b + math.sqrt(discriminant)) / (2*a)root2 = (-b - math.sqrt(discriminant)) / (2*a)return root1, root2",
         "use_case": "code_analysis",
         "ai_model": ""
     }
         print("Sending text upload request...")
         response = self.app.post('/llm/text', json=json_text_payload, content_type='application/json')

         print("Response received.")
         self.assertEqual(response.status_code, 200, msg=f"Response content: {response.data}")

    #TEXT INPUT: C++ code which prints the numbers 0-9 inclusive
     def test_text_upload_simple_code(self):
         json_text_payload = {
         "user_input":"int main() { for (int i = 0; i <= 9; ++i) {std::cout << i << ' ';}std::cout << std::endl;return 0;}",
         "use_case": "code_analysis",
         "ai_model": ""
     }
         print("Sending text upload request...")
         response = self.app.post('/llm/text', json=json_text_payload, content_type='application/json')

         print("Response received.")
         self.assertEqual(response.status_code, 200, msg=f"Response content: {response.data}")
         
class TestFileUploadCodeCompletionOpenAi(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()

    #FILE INPUT: python code which calculates the roots of a quadratic equation
    def test_file_upload_complex_code(self):
        from werkzeug.datastructures import MultiDict
         #Define a sample JSON payload
        json_file_payload = {
            "use_case": "code_completion",
            "ai_model": "OpenAI",
        }

        # Open the file from the specified path
        file_path = "C:\\Users\\yupfe\\Downloads\\FolderWithSampleFiles\\codecompletion.py"
        with open(file_path, 'rb') as file:
            file_content = file.read()

        # Log the first few characters of the file content
        print(f"File content: {file_content}")

        print("Sending file upload request...")
        # Make a POST request to /llm/file endpoint with the sample JSON payload and file
        data = MultiDict([
        ('file', (BytesIO(file_content), 'InsertionSort.py')),
        ('use_case', 'code_completion'),
        ('ai_model', 'OpenAI'),
        ('input_language', ''),
        ('output_language', '')
        ])
    # Use a MultiDict for the data parameter
        data = MultiDict(data)
        response = self.app.post('/llm/file',
                             content_type='multipart/form-data',
                             data=data)
 
        print("Response received.")
        
       #  Check if the response is successful (status code 200)
        self.assertEqual(response.status_code, 200, msg=f"Response content: {response.data}")
        
class TestFileUploadCodeCompletionWatsonX(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()

    #FILE INPUT: python code which calculates the roots of a quadratic equation
    def test_file_upload_complex_code(self):
        from werkzeug.datastructures import MultiDict
         #Define a sample JSON payload
        json_file_payload = {
            "use_case": "code_completion",
            "ai_model": "watsonx_ai",
        }

        # Open the file from the specified path
        file_path = "C:\\Users\\yupfe\\Downloads\\FolderWithSampleFiles\\codecompletion.py"
        with open(file_path, 'rb') as file:
            file_content = file.read()

        # Log the first few characters of the file content
        print(f"File content: {file_content}")

        print("Sending file upload request...")
        # Make a POST request to /llm/file endpoint with the sample JSON payload and file
        data = MultiDict([
        ('file', (BytesIO(file_content), 'InsertionSort.py')),
        ('use_case', 'code_completion'),
        ('ai_model', 'watsonx_ai'),
        ('input_language', ''),
        ('output_language', '')
        ])
    # Use a MultiDict for the data parameter
        data = MultiDict(data)
        response = self.app.post('/llm/file',
                             content_type='multipart/form-data',
                             data=data)
 
        print("Response received.")
        
       #  Check if the response is successful (status code 200)
        self.assertEqual(response.status_code, 200, msg=f"Response content: {response.data}")
        
class TestFileUploadCodeTranslationOpenAi(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()

    #FILE INPUT: python code which calculates the roots of a quadratic equation
    def test_file_upload_complex_code(self):
        from werkzeug.datastructures import MultiDict
         #Define a sample JSON payload
        json_file_payload = {
            "use_case": "code_translation",
            "ai_model": "OpenAI",
        }

        # Open the file from the specified path
        file_path = "C:\\Users\\yupfe\\Downloads\\FolderWithSampleFiles\\Triangle.java"
        with open(file_path, 'rb') as file:
            file_content = file.read()

        # Log the first few characters of the file content
        print(f"File content: {file_content}")

        print("Sending file upload request...")
        # Make a POST request to /llm/file endpoint with the sample JSON payload and file
        data = MultiDict([
        ('file', (BytesIO(file_content), 'TriangleArea.java')),
        ('use_case', 'code_translation'),
        ('ai_model', 'OpenAI'),
        ('input_language', 'java'),
        ('output_language', 'python')
        ])
    # Use a MultiDict for the data parameter
        data = MultiDict(data)
        response = self.app.post('/llm/file',
                             content_type='multipart/form-data',
                             data=data)
 
        print("Response received.")
        
       #  Check if the response is successful (status code 200)
        self.assertEqual(response.status_code, 200, msg=f"Response content: {response.data}")

class TestFileUploadCodeTranslationWatsonX(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()

    #FILE INPUT: python code which calculates the roots of a quadratic equation
    def test_file_upload_complex_code(self):
        from werkzeug.datastructures import MultiDict
         #Define a sample JSON payload
        json_file_payload = {
            "use_case": "code_translation",
            "ai_model": "watsonx_ai",
        }

        # Open the file from the specified path
        file_path = "C:\\Users\\yupfe\\Downloads\\FolderWithSampleFiles\\Triangle.java"
        with open(file_path, 'rb') as file:
            file_content = file.read()

        # Log the first few characters of the file content
        print(f"File content: {file_content}")

        print("Sending file upload request...")
        # Make a POST request to /llm/file endpoint with the sample JSON payload and file
        data = MultiDict([
        ('file', (BytesIO(file_content), 'TriangleArea.java')),
        ('use_case', 'code_translation'),
        ('ai_model', 'watsonx_ai'),
        ('input_language', 'java'),
        ('output_language', 'python')
        ])
    # Use a MultiDict for the data parameter
        data = MultiDict(data)
        response = self.app.post('/llm/file',
                             content_type='multipart/form-data',
                             data=data)
 
        print("Response received.")
        
       #  Check if the response is successful (status code 200)
        self.assertEqual(response.status_code, 200, msg=f"Response content: {response.data}")

class TestFileUploadCodeAnalysis(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()

    #FILE INPUT: python code which calculates the roots of a quadratic equation
    def test_file_upload_complex_code(self):
        from werkzeug.datastructures import MultiDict
         #Define a sample JSON payload
        json_file_payload = {
            "use_case": "code_analysis",
            "ai_model": "OpenAI",
        }

        # Open the file from the specified path
        file_path = "C:\\Users\\yupfe\\Downloads\\FolderWithSampleFiles\\Triangle.java"
        with open(file_path, 'rb') as file:
            file_content = file.read()

        # Log the first few characters of the file content
        print(f"File content: {file_content}")

        print("Sending file upload request...")
        # Make a POST request to /llm/file endpoint with the sample JSON payload and file
        data = MultiDict([
        ('file', (BytesIO(file_content), 'TriangleArea.java')),
        ('use_case', 'code_analsis'),
        ('ai_model', 'OpenAI'),
        ('input_language', ''),
        ('output_language', '')
        ])
    # Use a MultiDict for the data parameter
        data = MultiDict(data)
        response = self.app.post('/llm/file',
                             content_type='multipart/form-data',
                             data=data)
 
        print("Response received.")
        
       #  Check if the response is successful (status code 200)
        self.assertEqual(response.status_code, 200, msg=f"Response content: {response.data}")

    #FILE INPUT: C code which prints the numbers 0-9 inclusive
    def test_file_upload_simple_code(self):
        from werkzeug.datastructures import MultiDict
         #Define a sample JSON payload
        json_file_payload = {
            "use_case": "code_analysis",
            "ai_model": "OpenAI",
        }

        # Open the file from the specified path
        file_path = "C:\\Users\\yupfe\\Downloads\\FolderWithSampleFiles\\Triangle.java"
        with open(file_path, 'rb') as file:
            file_content = file.read()

        # Log the first few characters of the file content
        print(f"File content: {file_content}")

        print("Sending file upload request...")
        # Make a POST request to /llm/file endpoint with the sample JSON payload and file
        data = MultiDict([
        ('file', (BytesIO(file_content), 'TriangleArea.java')),
        ('use_case', 'code_analysis'),
        ('ai_model', 'OpenAI'),
        ('input_language', ''),
        ('output_language', '')
        ])
    # Use a MultiDict for the data parameter
        data = MultiDict(data)
        response = self.app.post('/llm/file',
                             content_type='multipart/form-data',
                             data=data)
 
        print("Response received.")
        
       #  Check if the response is successful (status code 200)
        self.assertEqual(response.status_code, 200, msg=f"Response content: {response.data}")

if __name__ == '__main__':
    unittest.main()
